[{"name":"app.R","content":"# Example 1\n# First Shiny application demonstrates Shiny's automatic UI updates. \n# Move the *Number of bins* slider and notice how the `renderPlot` expression \n# is automatically re-evaluated when its dependant, `input$bins`, changes, \n# causing a histogram with a new number of bins to be rendered.\n# Modified using class dataset called hkid\n# Try loading your own dataset\n# install.packages(\"foreign\")\nlibrary(foreign)\nlibrary(shiny)\nlibrary(readr)\npar(family=\"Palatino\")\nhkid <- read_csv(\"https://raw.githubusercontent.com/datageneration/datavisualization/master/data/hkid.csv\")\n# Define UI for app that draws a histogram ----\n\ntags$head(tags$style('body {font-family: Palatino}'))\nui <- fluidPage(\n  tags$head(\n    tags$h2(\"\", style = \"font-family: Palatino;\"),\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\")\n  ),\n  # App title ----\n \n # titlePanel(\"Hong Kong Identity\"),\n titlePanel(tags$h2(\n   tags$a(\"Hong Kong Identity\",href=\"https://hongkongelectionstudy.github.io/home/\", style = \"font-family: Palatino;\")\n )\n ), \n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n    \n    # Sidebar panel for inputs ----\n    sidebarPanel(\n      \n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 1,\n                  max = 20,\n                  value =10)\n      \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(\n      \n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n      \n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  \n  # Histogram of the Hong Kong Identity Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n    \n    x    <- hkid$Hongkonger\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    par(family=\"Palatino\")\n    hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Hong Konger Identity\",\n         main = \"Histogram of Hongkongers\")\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"shinylive01.R","content":"install.packages(c(\"shinylive\",\"httpuv\"))\nlibrary(shinylive)\nsetwd(\"/Users/karlho/Library/CloudStorage/Box-Box/__class/__DataVisualization/_workshop/shiny/shiny2024/hkid01\")\n\n\nshinylive::export(appdir = \".\", destdir = \"docs/hkid\") # appdir is the project directory where the app.R is located\n\n# Check if app is live and working\nhttpuv::runStaticServer(\"docs/hkid\", port=8008)\n","type":"text"},{"name":"styles.css","content":"/* styles.css */\n.heading {\n  color: steelblue; font-family: = \"Palatino\";\n}\n\n.paragraph {\n  color: black;\n}","type":"text"}]
